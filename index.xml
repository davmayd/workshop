<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Taskcat Workshop on taskcat workshop</title><link>/</link><description>Recent content in Taskcat Workshop on taskcat workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Lab Enviornment</title><link>/00_pre/00_page1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/00_pre/00_page1.html</guid><description> Lab information The AWS Appstream seesion that you are using for this hands on lab has the follow programs pre-installed:
Python3 (taskcat is Python program) taskcat (pip install taskcat) Vscode with plugins pre-installed taskcat config validation cfn-lint validation CloudFormation template auto-complete and doc links from the cfn-resource-spec</description></item><item><title>Config hierarchy</title><link>/00_concepts/00_page1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/00_concepts/00_page1.html</guid><description>Taskcat uses two config files: Global config and Project config
Project Config This config file provides project-specific configurations.
The project config file is located in the root of your project folder &amp;lt;PROJECT_ROOT&amp;gt;/.taskcat.yml
Since each lab uses the cfn-project directory as the project root, this is where our project-specific taskcat config file will reside.
Global config This config file provides global settings that become defaults for all projects.
The global config file is located in user&amp;rsquo;s home-directory.</description></item><item><title>Parameter Overrides</title><link>/00_concepts/00_page2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/00_concepts/00_page2.html</guid><description>Parameter Overrides Parameter Overrides were added to taskcat to solve a couple common problems: first, many templates share common parameters that are unique to an AWS account like a KeyPair name or an S3 Bucket, overrides provided a way to store those centrally for all your projects. Secondly, we didn&amp;rsquo;t want to add sensitive data (usernames, passwords, tokens) to a git repository. The idea was to store sensitive/unique data outside of a git repository, but still execute a test using this data.</description></item><item><title>Add a (Project Level) config</title><link>/10_lab1/10_page2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page2.html</guid><description> Project Config Ths config file provides project specific configuration.
The project config file is located in the root of your project folder &amp;lt;PROJECT_ROOT&amp;gt;/.taskcat.yml
From the vscode file browser navigate to lab1/cfn-project,
Open that taskcat.yml
Double click on the file to open them in the ide tabs
@TODO Screen shoot need updated to show appstream</description></item><item><title>- Define project section</title><link>/10_lab1/10_page3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page3.html</guid><description>Add a project section for the value of name: set it to the name of the project folder (cfn-project)
Note: the project name &amp;ldquo;cfn-project&amp;rdquo; has been set as the default for the S3KeyPrefix parameter in the provided template, using this pattern your templates are easily re-usable in other projects where the project name may differ. If you choose a different name for your project you will need to either update the S3KeyPrefix parameter in the template or set an additional parameter override.</description></item><item><title>- Defining tests</title><link>/10_lab1/10_page4.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page4.html</guid><description>Adding test definitions Define a test called mytest and define the template location
Specify path to your relative to you project root template: templates/lab1.template.yaml
Most of the default&amp;rsquo;s in taskcat can be overriden with command line flags, the default project root is the current working directory, and the default location for the .taskcat.yml file is in the root. To override these defaults you can use --project-root PROJECT_ROOT and --input-file PATH_TO_/.</description></item><item><title>- Define regions</title><link>/10_lab1/10_page5.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page5.html</guid><description> Add regions to your test The region: key is optional for tests by default region inherit from the global configuration (We will conver global configs later in this lab) The region parameter takes a list of regions. When defined in a test, taskcat will limit test to those regions
For now only specifiy one region us-east-1
tests: mytest: template: templates/lab1.template.yaml regions: - us-east-1</description></item><item><title>- Define parameters</title><link>/10_lab1/10_page6.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page6.html</guid><description>Add a parameter section to the test add the parameters: set the value of S3BucketName to $[taskcat_autobucket] This will evaluate to the bucket that taskcat creates during execution. Hint: Parameter vaules can be dynamically passed to a stack during creation when testing with taskcat. For example: By specifing $[taskcat_autobucket] as the value of S3BucketName we can instruct taskcat to replace value with the name of the bucket that will be created at runtime.</description></item><item><title>Lambda packaging</title><link>/10_lab1/10_page8.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page8.html</guid><description>Test staging From your vscode terminal change directory to your project root for lab1 (lab1/cfn-project)
Under cfn-project you will see the following files
cfn-project ├── lambda_functions/source/GenRandom/ ├── templates/lab1.template.yaml └── .taskcat.yml The provided template for lab1 uses lambda backed custom resource.
source/GenRandom contains the lambda source.
When lambda source is detected taskcat will package the lambda zip file and then save it to lambda_functions/packages/. This zip file is referenced in our lambda function.</description></item><item><title>Execute a taskcat test</title><link>/10_lab1/10_page7.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page7.html</guid><description> Start a test From the lab-1/cfn-project dir run you taskcat test
taskcat test run Expected output:</description></item><item><title>View test results</title><link>/10_lab1/10_page9.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page9.html</guid><description>Test Results After the test completes you will see a new folder under cfn-project called taskcat_outputs
cfn-project ├── lambda_functions ├── templates ├── .taskcat.yml └── taskcat_outputs/index.html &amp;lt; - (report) To open taskcat_outputs/index.html in the AppStream browser, we&amp;rsquo;ve provided a simple shortcut that can be executed from the terminal:
open-taskcat-report To see the test logs click the View Logs link</description></item><item><title>Create Psuedo Parameters</title><link>/20_lab2/20_page1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_lab2/20_page1.html</guid><description>Add Psuedo-Parameters to your project-level taskcat config Edit your cfn_project/.taskcat.yml parameters to include psuedo-parameters. Please see the Taskcat Concepts section for more details on psuedo-parameters
Note: Parameter values we want to override from the global config must still be defined within the project config. In our example, below, you see a placeholder value. This can be any string and has no other consequence.
Example project config file:</description></item><item><title>Execute a taskcat test</title><link>/20_lab2/20_page2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_lab2/20_page2.html</guid><description> Start a test From you vsode terminal change directory to your project root for lab2 (lab2/cfn-project)
Under cfn-project you will see the following files
cfn-project ├── lambda_functions ├── templates └── .taskcat.yml From the cfn-project dir run you taskcat testa
taskcat test run Expected output:</description></item><item><title>Check Template Outputs</title><link>/20_lab2/20_page3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/20_lab2/20_page3.html</guid><description>Test Results After the test completes you will see a new folder under cfn-project called taskcat_outputs
cfn-project ├── lambda_functions ├── templates ├── .taskcat.yml └── taskcat_outputs/index.html &amp;lt; - (report) open taskcat_outputs/index.html in the your web browser To see the test logs click the View Logs link
@TODO: MORE SCREENSHOTS OF TEMPLATE OUTPUTS</description></item><item><title>Add additional regions &amp; test</title><link>/30_lab3/30_page1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_lab3/30_page1.html</guid><description>Add more regions Edit your lab3/cfn_project/.taskcat.yml parameters to include additional regions.
Example project config file:
project: name: cfn-project tests: mytest: template: templates/lab3.template.yaml regions: - us-east-1 - us-east-2 - us-west-1 parameters: S3BucketName: &#39;$[taskcat_autobucket]&#39; S3KeyPrefix: &#39;cfn-project/&#39; LicenseToken: &#39;MY-FAKE-LICENSE-KEY&#39; AvailabilityZones: $[taskcat_genaz_2] Test the new regions taskcat test run Test Results After the test completes you will see a new folder under cfn-project called taskcat_outputs
cfn-project ├── lambda_functions ├── templates ├── .</description></item><item><title>Modify the template</title><link>/30_lab3/30_page2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_lab3/30_page2.html</guid><description>Modify In VSCode, edit the cfn_project/templates/lab3.template.yaml file. We&amp;rsquo;ll be adding the following snipplet to the Resources section of the template.
CopyZipsTemplate: Type: AWS::CloudFormation::Stack Properties: TemplateURL: !Sub &amp;quot;https://${S3BucketName}.${AWS::Region}.amazonaws.com/${S3KeyPrefix}templates/copy-zips.template.yaml&amp;quot; Parameters: S3BucketName: !Ref S3BucketName S3KeyPrefix: !Ref S3KeyPrefix SourceObjects: &amp;quot;lambda_functions/packages/GenRandom/lambda.zip&amp;quot; We&amp;rsquo;re also modifying the GenRandomLambda resource to use a template output from our CopyZipsStack.
GenRandomLambda: Type: AWS::Lambda::Function Properties: Description: Lambda creates simple random string Handler: lambda_function.handler Runtime: python3.7 Role: !GetAtt &#39;LambdaExecutionRole.Arn&#39; Timeout: 300 Code: S3Bucket: !</description></item><item><title>Test again &amp; verify!</title><link>/30_lab3/30_page3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/30_lab3/30_page3.html</guid><description>Test Results After the test completes you will see a new folder under cfn-project called taskcat_outputs
cfn-project ├── lambda_functions ├── templates ├── .taskcat.yml └── taskcat_outputs/index.html &amp;lt; - (report) open taskcat_outputs/index.html in the your web browser To see the test logs click the View Logs link</description></item><item><title>Initialize Git repo</title><link>/50_lab5/1_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/50_lab5/1_page.html</guid><description>To create a CICD pipeline for your project, you need a git repository. This repository will contain all the source code of your project and will be the source to trigger your pipeline.
For this lab, you will use AWS CodeCommit for your project&amp;rsquo;s git repository. We have already pre-created a Code Commit repsoitory in your team&amp;rsquo;s AWS Account. Click the following link to open the AWS CodeCommit console in a new tab of your browser.</description></item><item><title>Deploy CI/CD pipeline</title><link>/50_lab5/10_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/50_lab5/10_page.html</guid><description>Now, it&amp;rsquo;s time to setup a CICD pipeline for your project. To do that, go to your team&amp;rsquo;s dasbhoard and make a note of the following values. You will need this to create the pipeline.
Your AWS Code Commit repository Url (https://) Your AWS Code Commit repository name - quiz app Launch stack To create a CICD pipeline, you will use a CloudFormation template. Click the following button to launch a stack creation for the CICD pipeline.</description></item><item><title>View test and code promotion</title><link>/50_lab5/20_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/50_lab5/20_page.html</guid><description>Now, after your stack creation is completed successfully and you have a CICD pipeline setup, let&amp;rsquo;s see what does the pipeline do.
View CICD pipeline On your Cloudformation console, click the Outputs tab.
Look for CodePipelineURL, and open the link in a new tab in your browser.
This will open the AWS Code Pipeline console, and you should see a pipeline.
You may see that, either the Source action or the Build action is in-progress.</description></item></channel></rss>